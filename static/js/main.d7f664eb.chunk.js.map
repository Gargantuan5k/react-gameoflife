{"version":3,"sources":["index.js"],"names":["Box","selectBox","props","row","col","className","this","boxClass","id","onClick","React","Component","Grid","width","cols","rowsArr","i","rows","j","boxID","gridFull","push","style","Buttons","handleSelectGridSize","event","gridSize","clear","seed","pauseButton","playButton","slow","fast","title","onSelect","Item","eventKey","Main","gridCopy","arrayClone","state","setState","Math","floor","random","clearInterval","intervalID","setInterval","play","speed","grid","Array","fill","map","generation","size","g","g2","count","href","target","arr","JSON","parse","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7f664eb.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ButtonToolbar, Dropdown, DropdownButton } from 'react-bootstrap';\n\n// alert(\"There may be some minor visual glitches with the grid, especially with Firefox browser. Try zooming in/out :)\")\n\nclass Box extends React.Component {\n    selectBox = () => {\n        this.props.selectBox(this.props.row, this.props.col)\n    }\n\n    render() {\n        return (\n            <div\n                className={this.props.boxClass}\n                id={this.props.id}\n                onClick={this.selectBox}\n            />\n        );\n    }\n}\n\nclass Grid extends React.Component {\n    render() {\n        const width = (this.props.cols * 14);\n        var rowsArr = [];\n\n        var boxClass = \"\";\n        for (var i = 0; i < this.props.rows; i++) {\n            for (var j = 0; j < this.props.cols; j++) {\n                let boxID = i + \"_\" + j;\n\n                boxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\";\n                rowsArr.push(\n                    <Box\n                        boxClass={boxClass}\n                        key={boxID}\n                        boxID={boxID}\n                        row={i}\n                        col={j}\n                        selectBox={this.props.selectBox}\n                    />\n                );\n            }\n        }\n\n        return (\n            <div className=\"grid\" style={{ width: width }}>\n                {rowsArr}\n            </div>\n        );\n    }\n}\n\nclass Buttons extends React.Component {\n    handleSelectGridSize = (event) => {\n        this.props.gridSize(event);\n    } \n\n    render() {\n        return (\n            <div className=\"center\">\n                <ButtonToolbar>\n                    <button className=\"btn btn-default menu_button\" onClick={this.props.clear}>Clear</button>\n                    <button className=\"btn btn-default menu_button\" onClick={this.props.seed}>Seed</button>\n                    <button className=\"btn btn-default menu_button\" onClick={this.props.pauseButton}>Pause</button>\n                    <button className=\"btn btn-default menu_button\" onClick={this.props.playButton}><strong>Simulate!</strong></button>\n                    <button className=\"btn btn-default menu_button\" onClick={this.props.slow}>Slow</button>\n                    <button className=\"btn btn-default menu_button\" onClick={this.props.fast}>Fast</button>\n                    <DropdownButton\n                        title=\"Grid Size\"\n                        id=\"size-menu\"\n                        onSelect={this.handleSelectGridSize}>\n                        <Dropdown.Item eventKey=\"1\">Small</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"2\">Medium</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"3\">Large</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"5\">Gigantic</Dropdown.Item>\n                    </DropdownButton>\n                </ButtonToolbar>\n            </div>\n        );\n    }\n}\n\nclass Main extends React.Component {\n    constructor() {\n        super();\n        this.speed = 100;\n        this.rows = 30;\n        this.cols = 50;\n\n        this.state = {\n            generation: 0,\n            gridFull: Array(this.rows).fill().map(() => Array(this.cols).fill(false)),\n        }\n    }\n\n    selectBox = (row, col) => {\n        let gridCopy = arrayClone(this.state.gridFull);\n        gridCopy[row][col] = !gridCopy[row][col]\n        this.setState({\n            gridFull: gridCopy\n        });\n    }\n\n    seed = () => {\n        let gridCopy = arrayClone(this.state.gridFull);\n        for (let i = 0; i < this.rows; i++) {\n            for (let j = 0; j < this.cols; j++) {\n                if (Math.floor(Math.random() * 4) === 1) {\n                    gridCopy[i][j] = true;\n                }\n            }\n        }\n        this.setState({\n            gridFull: gridCopy\n        });\n    }\n\n    playButton = () => {\n        clearInterval(this.intervalID);\n        this.intervalID = setInterval(this.play, this.speed);\n    }\n\n    pauseButton = () => {\n        clearInterval(this.intervalID);\n    }\n\n    slow = () => {\n        this.speed = 1000;\n        this.playButton();\n    }\n\n    fast = () => {\n        this.speed = 100;\n        this.playButton();\n    }\n\n    clear = () => {\n        this.pauseButton();\n        var grid = Array(this.rows).fill().map(() => Array(this.cols).fill(false));\n        this.setState({\n            gridFull: grid,\n            generation: 0\n        });\n    }\n\n    gridSize = (size) => {\n        switch (size) {\n            case \"1\":\n                this.cols = 20;\n                this.rows = 10;\n            break;\n\n            case \"2\":\n                this.cols = 50;\n                this.rows = 30;\n            break;\n\n            case \"3\":\n                this.cols = 70;\n                this.rows = 50;\n            break;\n\n            default:\n                this.cols = 100;\n                this.rows = 100;\n        }\n        this.clear();\n    }\n\n    play = () => {\n        let g = this.state.gridFull;\n        let g2 = arrayClone(this.state.gridFull);\n\n        for (let i = 0; i < this.rows; i++) {\n            for (let j = 0; j < this.cols; j++) {\n                let count = 0;\n                if (i > 0) if (g[i - 1][j]) count++;\n                if (i > 0 && j > 0) if (g[i - 1][j - 1]) count++;\n                if (i > 0 && j < this.cols - 1) if (g[i - 1][j + 1]) count++;\n                if (j < this.cols - 1) if (g[i][j + 1]) count++;\n                if (j > 0) if (g[i][j - 1]) count++;\n                if (i < this.rows - 1) if (g[i + 1][j]) count++;\n                if (i < this.rows - 1 && j > 0) if (g[i + 1][j - 1]) count++;\n                if (i < this.rows - 1 && j < this.cols - 1) if (g[i + 1][j + 1]) count++;\n                if (g[i][j] && (count < 2 || count > 3)) g2[i][j] = false;\n                if (!g[i][j] && count === 3) g2[i][j] = true;\n            }\n        }\n\n        this.setState({\n            gridFull: g2,\n            generation: this.state.generation + 1\n        })\n    }\n\n    componentDidMount() {\n        this.seed();\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>The Game of Life (<a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"new\">?</a>)</h1>\n                \n\n                <Buttons\n                    playButton={this.playButton}\n                    pauseButton={this.pauseButton}\n                    fast={this.fast}\n                    slow={this.slow}\n                    clear={this.clear}\n                    seed={this.seed}\n                    gridSize={this.gridSize}\n                />\n                <Grid\n                    gridFull={this.state.gridFull}\n                    rows={this.rows}\n                    cols={this.cols}\n                    selectBox={this.selectBox}\n\n                />\n                <h2>Generations: {this.state.generation}</h2>\n                <h5>Board size: {this.rows}x{this.cols}<br />Speed: {this.speed}ms<br /></h5>\n            </div>\n        );\n    }\n}\n\nfunction arrayClone(arr) {\n    return JSON.parse(JSON.stringify(arr));\n}\n\nReactDOM.render(<Main />, document.getElementById('root'));"],"sourceRoot":""}